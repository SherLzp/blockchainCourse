{"ast":null,"code":"import _regeneratorRuntime from \"/Users/janei/Desktop/dapp/crowdfunding/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/janei/Desktop/dapp/crowdfunding/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { fundingFactoryInstance, newFundingInstance } from \"./instance\";\nimport web3 from '../utils/InitWeb3';\n\nvar getFundingDetails =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(index) {\n    var accounts, currentFundings, detailsPromises, detailInfo;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return web3.eth.getAccounts();\n\n          case 2:\n            accounts = _context2.sent;\n            currentFundings = [];\n\n            if (!(index === 1)) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 7;\n            return fundingFactoryInstance.methods.getAllFundings().call({\n              from: accounts[0]\n            });\n\n          case 7:\n            currentFundings = _context2.sent;\n            _context2.next = 22;\n            break;\n\n          case 10:\n            if (!(index === 2)) {\n              _context2.next = 16;\n              break;\n            }\n\n            _context2.next = 13;\n            return fundingFactoryInstance.methods.getCreatorFundings().call({\n              from: accounts[0]\n            });\n\n          case 13:\n            currentFundings = _context2.sent;\n            _context2.next = 22;\n            break;\n\n          case 16:\n            if (!(index === 3)) {\n              _context2.next = 22;\n              break;\n            }\n\n            _context2.next = 19;\n            return fundingFactoryInstance.methods.getSupportorFunding().call({\n              from: accounts[0]\n            });\n\n          case 19:\n            currentFundings = _context2.sent;\n            _context2.next = 22;\n            break;\n\n          case 22:\n            detailsPromises = currentFundings.map(function (fundingAddress) {\n              console.log(fundingAddress); //1. 把Funding实例拿过来\n\n              return new Promise(\n              /*#__PURE__*/\n              function () {\n                var _ref2 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(resolve, reject) {\n                  var newInstance, manager, projectName, targetMoney, supportMoney, leftTime, balance, investorCount, detail;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.prev = 0;\n                          newInstance = newFundingInstance();\n                          newInstance.options.address = fundingAddress; //3. 调用方法，返回funding合约的详情\n\n                          _context.next = 5;\n                          return newInstance.methods.manager().call();\n\n                        case 5:\n                          manager = _context.sent;\n                          _context.next = 8;\n                          return newInstance.methods.projectName().call();\n\n                        case 8:\n                          projectName = _context.sent;\n                          _context.next = 11;\n                          return newInstance.methods.targetMoney().call();\n\n                        case 11:\n                          targetMoney = _context.sent;\n                          _context.next = 14;\n                          return newInstance.methods.supportMoney().call();\n\n                        case 14:\n                          supportMoney = _context.sent;\n                          _context.next = 17;\n                          return newInstance.methods.getLeftTime().call();\n\n                        case 17:\n                          leftTime = _context.sent;\n                          _context.next = 20;\n                          return newInstance.methods.getBalance().call();\n\n                        case 20:\n                          balance = _context.sent;\n                          _context.next = 23;\n                          return newInstance.methods.getInvestorsCount().call();\n\n                        case 23:\n                          investorCount = _context.sent;\n                          detail = {\n                            fundingAddress: fundingAddress,\n                            manager: manager,\n                            projectName: projectName,\n                            targetMoney: targetMoney,\n                            supportMoney: supportMoney,\n                            leftTime: leftTime,\n                            balance: balance,\n                            investorCount: investorCount // console.table(detail)\n                            // console.log('00000000')\n\n                          };\n                          resolve(detail);\n                          _context.next = 31;\n                          break;\n\n                        case 28:\n                          _context.prev = 28;\n                          _context.t0 = _context[\"catch\"](0);\n                          reject(_context.t0);\n\n                        case 31:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, this, [[0, 28]]);\n                }));\n\n                return function (_x2, _x3) {\n                  return _ref2.apply(this, arguments);\n                };\n              }());\n            }); // console.log('11111111111')\n            // console.log('details:', detailsPromises)\n            //把多个promise处理成一个promise\n\n            detailInfo = Promise.all(detailsPromises);\n            return _context2.abrupt(\"return\", detailInfo);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  return function getFundingDetails(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar createFunding = function createFunding(projectName, targetMoney, supportMoney, duration) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(resolve, reject) {\n      var accounts, res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n              console.log(accounts);\n              console.log(projectName);\n              console.log(targetMoney);\n              console.log(supportMoney);\n              console.log(duration);\n              _context3.next = 11;\n              return fundingFactoryInstance.methods.createFunding(projectName, targetMoney, supportMoney, duration).send({\n                from: accounts[0]\n              });\n\n            case 11:\n              res = _context3.sent;\n              console.log(res);\n              resolve(res);\n              _context3.next = 19;\n              break;\n\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](0);\n              reject(_context3.t0);\n\n            case 19:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[0, 16]]);\n    }));\n\n    return function (_x4, _x5) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n};\n\nvar createRequest = function createRequest(fundingAddress, purpose, cost, seller) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(resolve, reject) {\n      var accounts, fundingContract, result;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context4.sent;\n              fundingContract = newFundingInstance();\n              fundingContract.options.address = fundingAddress;\n              _context4.next = 8;\n              return fundingContract.methods.createRequest(purpose, cost, seller).send({\n                from: accounts[0]\n              });\n\n            case 8:\n              result = _context4.sent;\n              resolve(result);\n              _context4.next = 15;\n              break;\n\n            case 12:\n              _context4.prev = 12;\n              _context4.t0 = _context4[\"catch\"](0);\n              reject(_context4.t0);\n\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this, [[0, 12]]);\n    }));\n\n    return function (_x6, _x7) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n};\n\nvar handleInvestFunc = function handleInvestFunc(fundingAddress, supportMoney) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref5 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(resolve, reject) {\n      var fundingInstance, accounts, res;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              fundingInstance = newFundingInstance();\n              fundingInstance.options.address = fundingAddress;\n              _context5.next = 5;\n              return web3.eth.getAccounts();\n\n            case 5:\n              accounts = _context5.sent;\n              _context5.next = 8;\n              return fundingInstance.methods.invest().send({\n                from: accounts[0],\n                value: supportMoney\n              });\n\n            case 8:\n              res = _context5.sent;\n              resolve(res);\n              _context5.next = 15;\n              break;\n\n            case 12:\n              _context5.prev = 12;\n              _context5.t0 = _context5[\"catch\"](0);\n              reject(_context5.t0);\n\n            case 15:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this, [[0, 12]]);\n    }));\n\n    return function (_x8, _x9) {\n      return _ref5.apply(this, arguments);\n    };\n  }());\n};\n\nvar showRequests = function showRequests(fundingAddress) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(resolve, reject) {\n      var accounts, fundingContract, requestCount, requestDetails, i, requestDetail;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context6.sent;\n              fundingContract = newFundingInstance();\n              fundingContract.options.address = fundingAddress; //获取花费请求的数量\n\n              _context6.next = 8;\n              return fundingContract.methods.getRequestsCount().call({\n                from: accounts[0]\n              });\n\n            case 8:\n              requestCount = _context6.sent;\n              requestDetails = []; //遍历请求数量，依次获取每一个请求的详情，添加到数组中，最后使用promise返回\n\n              i = 0;\n\n            case 11:\n              if (!(i < requestCount)) {\n                _context6.next = 19;\n                break;\n              }\n\n              _context6.next = 14;\n              return fundingContract.methods.getRequestByIndex(i).call({\n                from: accounts[0]\n              });\n\n            case 14:\n              requestDetail = _context6.sent;\n              requestDetails.push(requestDetail);\n\n            case 16:\n              i++;\n              _context6.next = 11;\n              break;\n\n            case 19:\n              resolve(requestDetails);\n              _context6.next = 25;\n              break;\n\n            case 22:\n              _context6.prev = 22;\n              _context6.t0 = _context6[\"catch\"](0);\n              reject(_context6.t0);\n\n            case 25:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this, [[0, 22]]);\n    }));\n\n    return function (_x10, _x11) {\n      return _ref6.apply(this, arguments);\n    };\n  }());\n};\n\nvar approveRequest = function approveRequest(fundingAddress, index) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref7 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(resolve, reject) {\n      var accounts, contract, result;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context7.sent;\n              contract = newFundingInstance();\n              contract.options.address = fundingAddress;\n              _context7.next = 8;\n              return contract.methods.approveRequest(index).send({\n                from: accounts[0]\n              });\n\n            case 8:\n              result = _context7.sent;\n              console.log('result :', result);\n              resolve(result);\n              _context7.next = 16;\n              break;\n\n            case 13:\n              _context7.prev = 13;\n              _context7.t0 = _context7[\"catch\"](0);\n              reject(_context7.t0);\n\n            case 16:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this, [[0, 13]]);\n    }));\n\n    return function (_x12, _x13) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n};\n\nvar finalizeRequest = function finalizeRequest(fundingAddress, index) {\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref8 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8(resolve, reject) {\n      var accounts, contract, result;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context8.sent;\n              contract = newFundingInstance();\n              contract.options.address = fundingAddress;\n              _context8.next = 8;\n              return contract.methods.finalizeRequest(index).send({\n                from: accounts[0]\n              });\n\n            case 8:\n              result = _context8.sent;\n              console.log('result :', result);\n              resolve(result);\n              _context8.next = 16;\n              break;\n\n            case 13:\n              _context8.prev = 13;\n              _context8.t0 = _context8[\"catch\"](0);\n              reject(_context8.t0);\n\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this, [[0, 13]]);\n    }));\n\n    return function (_x14, _x15) {\n      return _ref8.apply(this, arguments);\n    };\n  }());\n};\n\nexport { getFundingDetails, createFunding, handleInvestFunc, createRequest, showRequests, approveRequest, finalizeRequest };","map":{"version":3,"sources":["/Users/janei/Desktop/dapp/crowdfunding/src/eth/interaction.js"],"names":["fundingFactoryInstance","newFundingInstance","web3","getFundingDetails","index","eth","getAccounts","accounts","currentFundings","methods","getAllFundings","call","from","getCreatorFundings","getSupportorFunding","detailsPromises","map","fundingAddress","console","log","Promise","resolve","reject","newInstance","options","address","manager","projectName","targetMoney","supportMoney","getLeftTime","leftTime","getBalance","balance","getInvestorsCount","investorCount","detail","detailInfo","all","createFunding","duration","send","res","createRequest","purpose","cost","seller","fundingContract","result","handleInvestFunc","fundingInstance","invest","value","showRequests","getRequestsCount","requestCount","requestDetails","i","getRequestByIndex","requestDetail","push","approveRequest","contract","finalizeRequest"],"mappings":"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","sourcesContent":["import {fundingFactoryInstance, newFundingInstance} from \"./instance\";\nimport web3 from '../utils/InitWeb3'\n\nlet getFundingDetails = async (index) => {\n\n    let accounts = await web3.eth.getAccounts()\n\n    let currentFundings = []\n    if (index === 1) {\n        //所有的\n        currentFundings = await fundingFactoryInstance.methods.getAllFundings().call({\n            from: accounts[0]\n        })\n    } else if (index === 2) {\n        //我发起\n        currentFundings = await fundingFactoryInstance.methods.getCreatorFundings().call({\n            from: accounts[0]\n        })\n\n    } else if (index === 3) {\n        //我参与的\n        currentFundings = await fundingFactoryInstance.methods.getSupportorFunding().call({\n            from: accounts[0]\n        })\n\n    } else {\n\n    }\n    let detailsPromises = currentFundings.map(function (fundingAddress) {\n        console.log(fundingAddress)\n        //1. 把Funding实例拿过来\n\n        return new Promise(async (resolve, reject) => {\n            //2. 对实例进行填充地址，可以使用了\n            //这个instance是只有一个，后面的地址把前面的地址覆盖了，导致每次只能获取到最后一个合约的详情\n            //解决办法：每一个地址来的时候，都创建一个新的合约实例。\n            // fundingInstance.options.address = fundingAddress\n            try {\n                let newInstance = newFundingInstance()\n                newInstance.options.address = fundingAddress\n\n\n                //3. 调用方法，返回funding合约的详情\n                let manager = await newInstance.methods.manager().call()\n                let projectName = await newInstance.methods.projectName().call()\n                let targetMoney = await newInstance.methods.targetMoney().call()\n                let supportMoney = await newInstance.methods.supportMoney().call()\n                let leftTime = await newInstance.methods.getLeftTime().call()\n\n                let balance = await newInstance.methods.getBalance().call()\n\n                let investorCount = await newInstance.methods.getInvestorsCount().call()\n\n\n                let detail = {\n                    fundingAddress,\n                    manager,\n                    projectName,\n                    targetMoney,\n                    supportMoney,\n                    leftTime,\n                    balance,\n                    investorCount\n                }\n\n                // console.table(detail)\n                // console.log('00000000')\n\n                resolve(detail)\n            } catch (e) {\n                reject(e)\n            }\n        })\n    })\n\n    // console.log('11111111111')\n    // console.log('details:', detailsPromises)\n\n    //把多个promise处理成一个promise\n    let detailInfo = Promise.all(detailsPromises)\n\n    return detailInfo\n}\n\nlet createFunding = (projectName, targetMoney, supportMoney, duration) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let accounts = await web3.eth.getAccounts()\n            console.log(accounts);\n            console.log(projectName);\n            console.log(targetMoney);\n            console.log(supportMoney);\n            console.log(duration);\n            let res = await fundingFactoryInstance.methods.createFunding(projectName, targetMoney, supportMoney, duration).send({\n                    from: accounts[0],\n                }\n            )\n            console.log(res);\n            resolve(res)\n        } catch (e) {\n            reject(e)\n        }\n    })\n}\n\nconst createRequest = (fundingAddress, purpose, cost, seller) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let accounts = await web3.eth.getAccounts();\n\n            let fundingContract = newFundingInstance();\n            fundingContract.options.address = fundingAddress;\n\n            let result = await fundingContract.methods.createRequest(purpose, cost, seller).send({\n                from: accounts[0],\n            });\n\n            resolve(result);\n        } catch (e) {\n            reject(e);\n        }\n    })\n}\n\nlet handleInvestFunc = (fundingAddress, supportMoney) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let fundingInstance = newFundingInstance();\n            fundingInstance.options.address = fundingAddress\n\n            let accounts = await web3.eth.getAccounts()\n\n            let res = await fundingInstance.methods.invest().send({\n                from: accounts[0],\n                value: supportMoney,\n            })\n\n            resolve(res)\n        } catch (e) {\n            reject(e)\n        }\n    })\n}\n\nconst showRequests = (fundingAddress) => {\n    return new Promise(async (resolve, reject) => {\n        try {\n            let accounts = await web3.eth.getAccounts();\n            let fundingContract = newFundingInstance()\n            fundingContract.options.address = fundingAddress;\n\n            //获取花费请求的数量\n            let requestCount = await fundingContract.methods.getRequestsCount().call({\n                from: accounts[0],\n            });\n\n            let requestDetails = [];\n            //遍历请求数量，依次获取每一个请求的详情，添加到数组中，最后使用promise返回\n            for (let i = 0; i < requestCount; i++) {\n                let requestDetail = await fundingContract.methods.getRequestByIndex(i).call({\n                    from: accounts[0],\n                });\n\n                requestDetails.push(requestDetail);\n            }\n            resolve(requestDetails);\n        } catch (e) {\n            reject(e);\n        }\n    })\n}\n\n\nconst approveRequest = (fundingAddress, index) => {\n\n    return new Promise(async (resolve, reject) => {\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const contract = newFundingInstance()\n            contract.options.address = fundingAddress;\n\n            const result = await contract.methods.approveRequest(index).send({\n                from: accounts[0],\n            });\n\n            console.log('result :', result);\n\n            resolve(result);\n        } catch (e) {\n            reject(e);\n        }\n    })\n};\n\nconst finalizeRequest = (fundingAddress, index) => {\n\n    return new Promise(async (resolve, reject) => {\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const contract = newFundingInstance()\n            contract.options.address = fundingAddress;\n\n            const result = await contract.methods.finalizeRequest(index).send({\n                from: accounts[0],\n            });\n\n            console.log('result :', result);\n\n            resolve(result);\n        } catch (e) {\n            reject(e);\n        }\n    })\n}\n\n\nexport {\n    getFundingDetails,\n    createFunding,\n    handleInvestFunc,\n    createRequest,\n    showRequests,\n    approveRequest,\n    finalizeRequest,\n}"]},"metadata":{},"sourceType":"module"}