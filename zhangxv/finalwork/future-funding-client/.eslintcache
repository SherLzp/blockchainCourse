[{"D:\\Code\\FutureFunding\\future-funding-client\\src\\index.js":"1","D:\\Code\\FutureFunding\\future-funding-client\\src\\App.js":"2","D:\\Code\\FutureFunding\\future-funding-client\\src\\reportWebVitals.js":"3","D:\\Code\\FutureFunding\\future-funding-client\\src\\views\\HomePage.js":"4","D:\\Code\\FutureFunding\\future-funding-client\\src\\utils\\getWeb3.js":"5","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\HomePageStyles.js":"6","D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\ProjectCard.js":"7","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\ProjectCardStyles.js":"8","D:\\Code\\FutureFunding\\future-funding-client\\src\\views\\ProposalsPage.js":"9","D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\ProposalCard.js":"10","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\ProposalCardStyles.js":"11","D:\\Code\\FutureFunding\\future-funding-client\\src\\views\\VotePage.js":"12","D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\VoteCard.js":"13","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\VoteCardStyles.js":"14","D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\AppHeader.js":"15","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\AppHeaderStyles.js":"16","D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\AppDrawer.js":"17","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\AppDrawerStyles.js":"18"},{"size":541,"mtime":1610441686231,"results":"19","hashOfConfig":"20"},{"size":1193,"mtime":1610450810354,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":4904,"mtime":1610448368070,"results":"23","hashOfConfig":"20"},{"size":15992,"mtime":1610445214603,"results":"24","hashOfConfig":"20"},{"size":311,"mtime":1610350677571,"results":"25","hashOfConfig":"20"},{"size":4194,"mtime":1610352627423,"results":"26","hashOfConfig":"20"},{"size":376,"mtime":1610352671910,"results":"27","hashOfConfig":"20"},{"size":6639,"mtime":1610516042389,"results":"28","hashOfConfig":"20"},{"size":4416,"mtime":1610446344428,"results":"29","hashOfConfig":"20"},{"size":676,"mtime":1610361855301,"results":"30","hashOfConfig":"20"},{"size":2990,"mtime":1610516050875,"results":"31","hashOfConfig":"20"},{"size":4467,"mtime":1610373799175,"results":"32","hashOfConfig":"20"},{"size":674,"mtime":1610372127994,"results":"33","hashOfConfig":"20"},{"size":984,"mtime":1610434109856,"results":"34","hashOfConfig":"20"},{"size":494,"mtime":1610431643840,"results":"35","hashOfConfig":"20"},{"size":3532,"mtime":1610457960192,"results":"36","hashOfConfig":"20"},{"size":360,"mtime":1610434558126,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1ezoecx",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"D:\\Code\\FutureFunding\\future-funding-client\\src\\index.js",[],["85","86"],"D:\\Code\\FutureFunding\\future-funding-client\\src\\App.js",["87"],"import React, { useState } from 'react';\n\nimport HomePage from './views/HomePage';\nimport ProposalsPage from './views/ProposalsPage';\nimport VotePage from './views/VotePage';\nimport AppHeader from './components/AppHeader';\nimport AppDrawer from './components/AppDrawer';\nimport {BrowserRouter, Switch, Route, useLocation} from 'react-router-dom';\n\nfunction App() {\n\n  const[drawerOpen, setDrawerOpen] = useState(false)\n\n  // Get the path with its first letter capitalized\n  let location = useLocation();\n  let path = location.pathname.split('/')[1].charAt(0).toUpperCase() + location.pathname.split('/')[1].slice(1);\n\n\n  const handleDrawerClose = e => {\n    setDrawerOpen(false);\n  }\n\n  const handleDrawerOpen = e => {\n    setDrawerOpen(true);\n  }\n\n  return (\n    <React.Fragment>\n\n      <AppHeader handleDrawerOpen={handleDrawerOpen} text={path ? path : \"Projects\"}/>\n      <AppDrawer open={drawerOpen} onClose={handleDrawerClose}/>\n\n      <Switch>\n        <Route exact path=\"/\" ><HomePage /> </Route>\n        <Route exact path=\"/proposals\"><ProposalsPage/></Route>\n        <Route exact path=\"/votes\" component={VotePage} />\n      </Switch>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","D:\\Code\\FutureFunding\\future-funding-client\\src\\reportWebVitals.js",[],"D:\\Code\\FutureFunding\\future-funding-client\\src\\views\\HomePage.js",["88","89","90","91","92"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, Fab, Grid, Toolbar, Dialog, DialogContent, DialogContentText, DialogTitle, DialogActions, Button, TextField} from '@material-ui/core';\r\nimport getWeb3, {CONTRACT_ABI, CONTRACT_ADDRESS} from '../utils/getWeb3';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ProjectCard from '../components/ProjectCard';\r\nimport AppHeader from '../components/AppHeader';\r\n\r\nimport styles from  '../styles/HomePageStyles';\r\nimport AppDrawer from '../components/AppDrawer';\r\n\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [web3, setWeb3] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [contract, setContract] = useState(null);\r\n  const [projects, setProjects] = useState(null);\r\n\r\n  // Dialog States (Too lazy to create another component...)\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [dialogAmount, setDialogAmount] = useState();\r\n  const [dialogTitle, setDialogTitle] = useState();\r\n  const [dialogDes, setDialogDes] = useState();\r\n  const [dialogDays, setDialogDays] = useState();\r\n\r\n  const [drawerOpen, setDrawerOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const tempWeb3 = await getWeb3();     \r\n      const tempAccount = await tempWeb3.eth.getAccounts();\r\n      const tempContract = new tempWeb3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n      const tempProjects = await tempContract.methods.getAllProjects().call(); \r\n      setWeb3(tempWeb3);\r\n      setAccount(tempAccount[0]);\r\n      setContract(tempContract);\r\n      setProjects(tempProjects);\r\n    }\r\n    fetchData();\r\n    console.log(\"In HomePage UseEffect()\")\r\n  }, []);\r\n  \r\n  // console.log(\"account \"+account+\" contract \"+contract+\" projects \"+projects);\r\n\r\n  const invest = (id, amount) => ( \r\n    new Promise(\r\n      function (resolve, reject) {\r\n        console.log(`id: ${id}, amount: ${amount}`);\r\n        web3.eth.getAccounts()\r\n        .then(accounts => accounts[0])\r\n        .then(account => {\r\n          contract.methods.investProject(id).send({\r\n            from: account,\r\n            gas: 6721975,\r\n            value: web3.utils.toWei(amount, \"ether\")\r\n          }).then( () => contract.methods.getBalanceOfProject(id).call((err, res) => resolve(res)) )\r\n        })\r\n      })\r\n  )\r\n\r\n  const createProject = () => {\r\n    contract.methods.createProject(web3.utils.toWei(dialogAmount, \"ether\"), dialogTitle, dialogDes, dialogDays*24*60*60*1000).send({ \r\n      from: account,\r\n      gas: 6721975\r\n    }).then(() => {\r\n      contract.methods.getAllProjects().call((err, res) => {\r\n        setProjects(res);\r\n      })\r\n    })\r\n    setDialogOpen(false);\r\n  }\r\n\r\n  const handleFABClick = () => {\r\n    setDialogOpen(true);\r\n  }\r\n\r\n  const handleDialogClose = () => {\r\n    setDialogOpen(false);\r\n  }\r\n\r\n  const handleAmountChange = (e) => {\r\n    setDialogAmount(e.target.value);\r\n  }\r\n\r\n  const handleTitleChange = (e) => {\r\n    setDialogTitle(e.target.value);\r\n  }\r\n\r\n  const handleDesChange = (e) => {\r\n    setDialogDes(e.target.value);\r\n  }\r\n\r\n  const handleDaysChange = (e) => {\r\n    setDialogDays(e.target.value);\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n\r\n      \r\n      <Grid container direction=\"column\" >\r\n      {projects ? projects.map((p, i) => (\r\n        <Grid container item direction=\"row\" justify=\"center\" key={i}>\r\n          <Grid item sm={8} md={5} lg={5}>\r\n            <ProjectCard \r\n            id={i} \r\n            address={p}\r\n            web3={web3}\r\n            invest={invest}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )) : null}   \r\n\r\n      </Grid>\r\n\r\n      <Fab color=\"primary\" aria-label=\"add\" className={classes.addBtn} onClick={handleFABClick}>\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n      <Dialog open={dialogOpen} onClose={handleDialogClose}>\r\n        <DialogTitle>Create Your Project</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Let's broadcast your excellent ideas on the blockchain!\r\n          </DialogContentText>\r\n          <TextField label=\"Goal (in ether)\" onChange={handleAmountChange} fullWidth style={{marginTop: 10}} />\r\n          <TextField label=\"Name\" onChange={handleTitleChange} fullWidth style={{marginTop: 10}}/>\r\n          <TextField label=\"Description\" onChange={handleDesChange} multiline fullWidth style={{marginTop: 10}}/>\r\n          <TextField label=\"Days\" onChange={handleDaysChange} fullWidth style={{marginTop: 10}} />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={handleDialogClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button color=\"primary\" onClick={createProject}>\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default HomePage;","D:\\Code\\FutureFunding\\future-funding-client\\src\\utils\\getWeb3.js",[],"D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\HomePageStyles.js",[],"D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\ProjectCard.js",["93","94"],"import { Card, Typography, makeStyles, CardContent, Grid, CardActions, Button, Dialog, DialogTitle, DialogContent, TextField, DialogActions, DialogContentText } from '@material-ui/core';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {PROJECT_CONTRACT_ABI} from '../utils/getWeb3';\r\nimport styles from '../styles/ProjectCardStyles';\r\n\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nconst ProjectCard = (props) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [project, setProject] = useState();\r\n  const [title, setTitle] = useState();\r\n  const [description, setDescription] = useState();\r\n  const [goal, setGoal] = useState();\r\n  const [balance, setBalance] = useState();\r\n  const [dialopOpen, setDialogOpen] = useState(false);\r\n  const [amount, setAmount] = useState(0);\r\n  \r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const tempProject = new props.web3.eth.Contract(PROJECT_CONTRACT_ABI, props.address);\r\n      setProject(tempProject);\r\n      const tempTitle = await tempProject.methods.title().call();\r\n      setTitle(tempTitle);\r\n      const tempDes = await tempProject.methods.description().call();\r\n      setDescription(tempDes);\r\n      const tempGoal = await tempProject.methods.targetAmount().call();\r\n      setGoal(tempGoal);\r\n      const tempBalance = await tempProject.methods.balance().call();\r\n      setBalance(tempBalance);\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const handleInvestBtnClick = (e) => {\r\n    setDialogOpen(true);\r\n  }\r\n\r\n  const handleDialogClose = (e) => {\r\n    setDialogOpen(false);\r\n  }\r\n\r\n  const handleAmountChange = (e) => {\r\n    setAmount(e.target.value);\r\n  }\r\n\r\n  const invest = async (e) => {\r\n    setDialogOpen(false);\r\n    const tmpBalance = await props.invest(props.id, amount)\r\n    console.log(tmpBalance);\r\n    setBalance(tmpBalance);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card className={classes.projectCard} elevation={3} >\r\n        <CardContent>\r\n          <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{marginBottom: 10, marginLeft: -5}}>\r\n            <Grid item>\r\n              <Typography variant=\"h4\" >{title}</Typography>\r\n            </Grid>\r\n            <Grid item >\r\n              <Grid item >\r\n                <Typography variant=\"subtitle2\">\r\n                  {goal ? `Goal: ${props.web3.utils.fromWei(String(goal))} ether(s)` : null}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"subtitle2\">\r\n                  {balance ? `Balance: ${props.web3.utils.fromWei(String(balance))} ether(s)` : null}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" >\r\n            {description}\r\n          </Typography>         \r\n        </CardContent>\r\n        <CardActions >\r\n          <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n            <Grid item>\r\n              <Button size=\"small\" className={classes.cardLearnMoreBtn}>\r\n                Learn more\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size=\"small\" className={classes.cardInvestBtn} onClick={handleInvestBtnClick}>\r\n                Invest now\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n      <Dialog open={dialopOpen} onClose={handleDialogClose}>\r\n        <DialogTitle>Invest {title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            To invest this project, please enter the ether amount here. \r\n          </DialogContentText>\r\n          <TextField \r\n          id=\"amount\"\r\n          onChange={handleAmountChange}\r\n          autoFocus\r\n          margin=\"normal\"\r\n          fullWidth\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDialogClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={invest} color=\"primary\">\r\n            Invest\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default ProjectCard;","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\ProjectCardStyles.js",[],"D:\\Code\\FutureFunding\\future-funding-client\\src\\views\\ProposalsPage.js",["95","96","97","98","99","100","101","102","103"],"import React, {useState, useEffect, useLayoutEffect} from 'react';\r\nimport getWeb3, {CONTRACT_ABI, CONTRACT_ADDRESS, PROJECT_CONTRACT_ABI} from '../utils/getWeb3';\r\nimport ProposalCard from \"../components/ProposalCard\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { Fab, Grid, Toolbar, makeStyles, Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText, TextField, Button, MenuItem, Select, FormControl, InputLabel } from '@material-ui/core';\r\n\r\nimport styles from \"../styles/HomePageStyles\";\r\nimport AppHeader from \"../components/AppHeader\";\r\nimport AppDrawer from \"../components/AppDrawer\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nconst ProposalPage = (props) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [web3, setWeb3] = useState();\r\n  const [account, setAccount] = useState();\r\n  const [contract, setContract] = useState();\r\n  const [proposals, setProposals] = useState();\r\n  const [projects, setProjects] = useState(new Object());\r\n\r\n  // Dialog States (Too lazy to create another component...)\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [dialogProjID, setDialogProjID] = useState(-1);\r\n  const [dialogAmount, setDialogAmount] = useState();\r\n  const [dialogTitle, setDialogTitle] = useState();\r\n  const [dialogDes, setDialogDes] = useState();\r\n  const [dialogDays, setDialogDays] = useState();\r\n  const [dialogTo, setDialogTo] = useState();\r\n\r\n  const [count, setCount] = useState(0)\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      console.log(\"in fetch data()\")\r\n      const tempWeb3 = await getWeb3();  \r\n      console.log(\"in fetch data() 2\")\r\n      setWeb3(tempWeb3);   \r\n\r\n      const tempAccounts = await tempWeb3.eth.getAccounts();\r\n      setAccount(tempAccounts[0]);      \r\n      const tempContract = new tempWeb3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n      setContract(tempContract);\r\n      const tempProposals = await tempContract.getPastEvents('proposalRaised', {\r\n        filter: {initiator: tempAccounts[0]},\r\n        fromBlock: 0,\r\n        toBlock: 'latest'\r\n      });\r\n      \r\n      setProposals(tempProposals);\r\n      const tempProjects = await tempContract.getPastEvents('projectCreated', {\r\n        filter: {initiator: tempAccounts[0]},\r\n        fromBlock: 0,\r\n        toBlock: 'latest'\r\n      });\r\n      console.log(tempProjects);\r\n      //Fetch all related projects ID and get their name\r\n      for (let p of tempProjects) {\r\n        const projectAddr = await tempContract.methods.projects(p.returnValues.projectID).call()\r\n        const project = new tempWeb3.eth.Contract(PROJECT_CONTRACT_ABI, projectAddr);\r\n        const title = await project.methods.title().call();\r\n        let newProjects = projects;\r\n        newProjects[title] = p.returnValues.projectID;\r\n        setProjects(newProjects);\r\n      }      \r\n    }\r\n    fetchData();\r\n    console.log(\"In ProposalPage UseEffect()\");\r\n  });\r\n\r\n  console.log(projects);\r\n\r\n  console.log(\"In proposal Page\")\r\n\r\n  const transfer = (id, amount, proposal) => new Promise(\r\n    function(resolve, reject) {\r\n      contract.methods.transferForProposal(id).send({\r\n        from: account,\r\n        value: amount,\r\n        gas: 6721975\r\n      })\r\n      .then(() => {\r\n        proposal.methods.isFinished().call((err, res) => {\r\n          resolve(res)\r\n        })\r\n      })\r\n    }\r\n  )\r\n  \r\n  const createProposal = (e) => {\r\n    contract.methods.raiseProposal(dialogTo, dialogProjID, web3.utils.toWei(dialogAmount, \"ether\"), dialogTitle, dialogDes).send({ \r\n        from: account,\r\n        gas: 6721975\r\n    }).then(() => {\r\n      contract.getPastEvents('proposalRaised', {\r\n        filter: {initiator: account},\r\n        fromBlock: 0,\r\n        toBlock: 'latest'\r\n      }, (err, res) => {\r\n        setProposals(res);\r\n      });\r\n    })\r\n    setDialogOpen(false);\r\n  }\r\n\r\n  const handleFABClick = () => {\r\n    setDialogOpen(true);\r\n  }\r\n\r\n  const handleDialogClose = () => {\r\n    setDialogOpen(false);\r\n  }\r\n\r\n  const handleSelectChange = (e) => {\r\n    setDialogProjID(e.target.value);\r\n  }\r\n\r\n  const handleAmountChange = (e) => {\r\n    setDialogAmount(e.target.value);\r\n  }\r\n\r\n  const handleTitleChange = (e) => {\r\n    setDialogTitle(e.target.value);\r\n  }\r\n\r\n  const handleDesChange = (e) => {\r\n    setDialogDes(e.target.value);\r\n  }\r\n\r\n  const handleDaysChange = (e) => {\r\n    setDialogDays(e.target.value);\r\n  }\r\n\r\n  const handleToChange = e => {\r\n    setDialogTo(e.target.value)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <Grid container direction=\"column\">\r\n      {proposals ? proposals.map( (p, index) => (\r\n        <Grid key={index} container item direction=\"row\" justify=\"center\" >\r\n          <Grid item sm={8} md={6} lg={5}>\r\n            <ProposalCard \r\n            id = {p.returnValues.proposalID}\r\n            projectID = {p.returnValues.projectID}\r\n            web3 = {web3}\r\n            contract = {contract}\r\n            account = {account}\r\n            transfer = {transfer}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      )) : null}\r\n      </Grid> \r\n\r\n      <Dialog open={dialogOpen} onClose={handleDialogClose}>\r\n        <DialogTitle>Raise Your New Proposal</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Please fill the following fields.\r\n          </DialogContentText>\r\n          <FormControl style={{marginTop: 10}}>\r\n            <InputLabel>Project</InputLabel>\r\n            <Select value={dialogProjID} onChange={handleSelectChange} style={{minWidth: 120}} >\r\n              {Object.keys(projects).map((title, index) => \r\n                <MenuItem value={projects[title]} key={index}>{title}</MenuItem>\r\n              )}\r\n            </Select>\r\n          </FormControl>\r\n          <TextField label=\"Amount (in ether)\" onChange={handleAmountChange} fullWidth style={{marginTop: 10}} />\r\n          <TextField label=\"Tranfer To\" onChange={handleToChange} fullWidth style={{marginTop: 10}} />\r\n          <TextField label=\"Name\" onChange={handleTitleChange} fullWidth style={{marginTop: 10}}/>\r\n          <TextField label=\"Description\" onChange={handleDesChange} multiline fullWidth style={{marginTop: 10}}/>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDialogClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={createProposal} color=\"primary\">\r\n            Create\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n\r\n      <Fab color=\"primary\" aria-label=\"add\" className={classes.addBtn} onClick={handleFABClick}>\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n    </React.Fragment>\r\n  );\r\n\r\n}\r\n\r\nexport default ProposalPage;","D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\ProposalCard.js",["104","105","106","107"],"import { Card, Typography, CardContent, Grid, CardActions, Button, makeStyles } from '@material-ui/core';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {PROPOSAL_CONTRACT_ABI, PROJECT_CONTRACT_ABI} from '../utils/getWeb3';\r\nimport styles from '../styles/ProposalCardStyles';\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nconst ProposalCard = (props) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [address, setAddress] = useState();\r\n  const [proposal, setProposal] = useState();\r\n  const [title, setTitle] = useState();\r\n  const [description, setDescription] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [isApproved, setIsApproved] = useState(false);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const [to, setTo] = useState();\r\n  const [projectTitle, setProjectTitle] = useState();\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      //get the proposal address\r\n      const tmpAddress = await props.contract.methods.proposals(props.id).call();\r\n      setAddress(tmpAddress);\r\n      //instantiate the proposal\r\n      const tmpProposal = new props.web3.eth.Contract(PROPOSAL_CONTRACT_ABI, tmpAddress);\r\n      setProposal(tmpProposal);\r\n      //get the title, description, amount, to, isApproved, and isFinished.\r\n      const tmpTitle = await tmpProposal.methods.title().call();\r\n      const tmpDescription = await tmpProposal.methods.description().call();\r\n      const tmpAmount = await tmpProposal.methods.amount().call();\r\n      const tmpTo = await tmpProposal.methods.to().call();\r\n      const tmpIsApproved = await tmpProposal.methods.isApproved().call();\r\n      const tmpIsFinished = await tmpProposal.methods.isFinished().call();\r\n      setTitle(tmpTitle);\r\n      setDescription(tmpDescription);\r\n      setAmount(tmpAmount);\r\n      setIsApproved(tmpIsApproved);\r\n      setIsFinished(tmpIsFinished);\r\n      console.log(`to: ${tmpTo}`);\r\n      //get the project name\r\n      const tmpProjAddress = await props.contract.methods.projects(props.projectID).call();\r\n      const tmpProject = new props.web3.eth.Contract(PROJECT_CONTRACT_ABI, tmpProjAddress);\r\n      const tmpProjectTitle = await tmpProject.methods.title().call()\r\n      setProjectTitle(tmpProjectTitle);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleTransfer = async () => {\r\n    const result = await props.transfer(props.id, amount, proposal);\r\n    setIsFinished(result);\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card className={classes.proposalCard} elevation={3}>\r\n        <CardContent>\r\n          <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{marginBottom: 10, marginLeft: -5}}>\r\n            <Grid item>\r\n              <Typography variant=\"h4\" >{title}</Typography>\r\n            </Grid>\r\n            <Grid item >\r\n              <Grid item >\r\n                <Typography variant=\"subtitle2\">\r\n                  {projectTitle ? `Project: ${projectTitle}` : null}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"subtitle2\">\r\n                  {amount ? `Requires: ${props.web3.utils.fromWei(String(amount))} ether(s)` : null}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" >\r\n            {description}\r\n          </Typography>         \r\n        </CardContent>\r\n        <CardActions >\r\n          <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n            <Grid item>\r\n              <Button size=\"small\" className={classes.cardLearnMoreBtn}>\r\n                Learn more\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              {\r\n                isApproved ? (\r\n                  isFinished ? \r\n                  <Typography className={classes.finishedHint}>\r\n                    Finished\r\n                  </Typography> : \r\n                  <Button size=\"small\" className={classes.cardTransferBtn} onClick={handleTransfer}>\r\n                    Transfer now\r\n                  </Button>\r\n                ) :\r\n                <Typography className={classes.votingHint}>\r\n                  To be voted\r\n                </Typography>\r\n              }\r\n            </Grid>\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n    </React.Fragment>\r\n\r\n  );\r\n}\r\n\r\n\r\nexport default ProposalCard;","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\ProposalCardStyles.js",[],["108","109"],"D:\\Code\\FutureFunding\\future-funding-client\\src\\views\\VotePage.js",["110","111","112","113","114","115","116"],"import React, {useEffect, useState} from \"react\";\r\nimport {Grid, Toolbar, Typography} from \"@material-ui/core\";\r\nimport getWeb3, {CONTRACT_ABI, CONTRACT_ADDRESS} from \"../utils/getWeb3\";\r\nimport VoteCard from \"../components/VoteCard\";\r\n\r\nimport AppHeader from \"../components/AppHeader\";\r\nimport AppDrawer from \"../components/AppDrawer\";\r\n\r\n\r\nconst VotePage = (props) => {\r\n\r\n  const [web3, setWeb3] = useState();\r\n  const [account, setAccount] = useState();\r\n  const [contract, setContract] = useState();\r\n  const [proposals, setProposals] = useState([]);\r\n  const [drawerOpen, setDrawerOpen] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const tmpWeb3 = await getWeb3();  \r\n      const tmpAccounts = await tmpWeb3.eth.getAccounts();\r\n      const tmpAccount = tmpAccounts[0];\r\n      const tmpContract = new tmpWeb3.eth.Contract(CONTRACT_ABI, CONTRACT_ADDRESS);\r\n      const tmpInvestments = await tmpContract.getPastEvents(\"projectInvested\", {\r\n        filter: {investor: tmpAccount},\r\n        fromBlock: 0,\r\n        toBlock: 'latest'\r\n      })\r\n      // Find all invested projects\r\n      let investSet = new Set();\r\n      tmpInvestments.forEach( invest => {\r\n        investSet.add(invest.returnValues.projectID)\r\n      })\r\n      // Find all proposals of projects that have been invested by current account\r\n      let tmpProposals = new Set();\r\n      for (let projID of investSet) {\r\n        let proposals = await tmpContract.getPastEvents(\"proposalRaised\", {\r\n          filter: {projectID: projID},\r\n          fromBlock: 0,\r\n          toBlock: 'latest'\r\n        });\r\n        proposals.forEach( p => tmpProposals.add(p.returnValues.proposalID) );\r\n      }\r\n      setWeb3(tmpWeb3);\r\n      setAccount(tmpAccount);\r\n      setContract(tmpContract);\r\n      setProposals(Array.from(tmpProposals));\r\n      console.log(\"In VotePage UseEffect\");\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const vote = (proposalID, proposal) => new Promise (\r\n    function(resolve, reject) {\r\n      contract.methods.voteForProposal(proposalID).send({\r\n        from: account,\r\n        gas: 6721975\r\n      })\r\n      .then((res) => {\r\n        proposal.methods.getIsVoted().call({from: account}, (err, res) => {\r\n          resolve(res);\r\n        })\r\n      })\r\n    }\r\n  )\r\n\r\n  const handleDrawerOpen = e => {\r\n    setDrawerOpen(true);\r\n  }\r\n\r\n  const handleDrawerClose = e => {\r\n    setDrawerOpen(false);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\">\r\n        {proposals.map((id, index) => (\r\n          <Grid container item direction=\"row\" justify=\"center\" key={index}>\r\n            <Grid item sm={8} md={5} lg={5}>\r\n              <VoteCard\r\n              proposalID = {id}\r\n              web3 = {web3}\r\n              contract = {contract}\r\n              account = {account}\r\n              vote={vote}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default VotePage;","D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\VoteCard.js",["117","118","119","120","121","122","123"],"import React, {useState, useEffect} from \"react\";\r\nimport { Card, Typography, CardContent, Grid, CardActions, Button, makeStyles } from '@material-ui/core';\r\nimport styles from '../styles/VoteCardStyles';\r\nimport {PROPOSAL_CONTRACT_ABI, PROJECT_CONTRACT_ABI} from '../utils/getWeb3';\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nconst VoteCard = (props) => {\r\n\r\n  const classes = useStyles(styles);\r\n\r\n  const [address, setAddress] = useState();\r\n  const [proposal, setProposal] = useState();\r\n  const [title, setTitle] = useState();\r\n  const [description, setDescription] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [isApproved, setIsApproved] = useState(false);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const [to, setTo] = useState();\r\n  const [projectTitle, setProjectTitle] = useState();\r\n  const [isVoted, setIsVoted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      //get the proposal address\r\n      const tmpAddress = await props.contract.methods.proposals(props.proposalID).call();\r\n      setAddress(tmpAddress);\r\n      //instantiate the proposal\r\n      const tmpProposal = new props.web3.eth.Contract(PROPOSAL_CONTRACT_ABI, tmpAddress);\r\n      setProposal(tmpProposal);\r\n      //get the title, description, amount, to, isApproved, and isFinished.\r\n      const tmpTitle = await tmpProposal.methods.title().call();\r\n      const tmpDescription = await tmpProposal.methods.description().call();\r\n      const tmpAmount = await tmpProposal.methods.amount().call();\r\n      const tmpTo = await tmpProposal.methods.to().call();\r\n      const tmpIsApproved = await tmpProposal.methods.isApproved().call();\r\n      const tmpIsFinished = await tmpProposal.methods.isFinished().call();\r\n      const tmpIsVoted = await tmpProposal.methods.getIsVoted().call({from: props.account});\r\n      setTitle(tmpTitle);\r\n      setDescription(tmpDescription);\r\n      setAmount(tmpAmount);\r\n      setIsApproved(tmpIsApproved);\r\n      setIsFinished(tmpIsFinished);\r\n      setIsVoted(tmpIsVoted);\r\n      console.log(`isVoted: ${isVoted}`);\r\n      //get the project name\r\n      const tmpProjID = await tmpProposal.methods.projectID().call();\r\n      const tmpProjAddress = await props.contract.methods.projects(tmpProjID).call();\r\n      const tmpProject = new props.web3.eth.Contract(PROJECT_CONTRACT_ABI, tmpProjAddress);\r\n      const tmpProjectTitle = await tmpProject.methods.title().call()\r\n      setProjectTitle(tmpProjectTitle);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleVote = async (e) => {\r\n    const newIsVoted = await props.vote(props.proposalID, proposal);\r\n    setIsVoted(newIsVoted);\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Card className={classes.proposalCard} elevation={3}>\r\n        <CardContent>\r\n          <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{marginBottom: 10, marginLeft: -5}}>\r\n            <Grid item>\r\n              <Typography variant=\"h4\" >{title}</Typography>\r\n            </Grid>\r\n            <Grid item >\r\n              <Grid item >\r\n                <Typography variant=\"subtitle2\">\r\n                  {projectTitle ? `Project: ${projectTitle}` : null}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"subtitle2\">\r\n                  {amount ? `Required: ${props.web3.utils.fromWei(String(amount))} ether(s)` : null}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" >\r\n            {description}\r\n          </Typography>         \r\n        </CardContent>\r\n        <CardActions >\r\n          <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\r\n            <Grid item>\r\n              <Button size=\"small\" className={classes.cardLearnMoreBtn}>\r\n                Learn more\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              {\r\n                isVoted ? \r\n                <Typography className={classes.votedHint}>\r\n                  Voted\r\n                </Typography>\r\n                :\r\n                <Button size=\"small\" className={classes.cardTransferBtn} onClick={handleVote}>\r\n                   Approve\r\n                </Button>\r\n              }\r\n            </Grid>\r\n          </Grid>\r\n        </CardActions>\r\n      </Card>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default VoteCard;","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\VoteCardStyles.js",["124"],"import blue from '@material-ui/core/colors/blue';\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nconst styles = theme=> ({\r\n  proposalCard: {\r\n    padding: theme.spacing(2, 2, 1, 2),\r\n    margin: theme.spacing(1, 0, 1, 0),\r\n  },\r\n  cardTransferBtn: {\r\n    color: blue[800],\r\n    marginRight: 30,\r\n    fontWeight: 900,\r\n  },\r\n  cardLearnMoreBtn: {\r\n    marginLeft: 6,\r\n    fontWeight: 500,\r\n  },\r\n  votedHint: {\r\n    marginRight: 30,  \r\n    fontWeight: 700,\r\n    color: green[700],\r\n  },\r\n  finishedHint: {\r\n    marginRight: 30,  \r\n    fontWeight: 700,\r\n    color: green[700],\r\n  }\r\n})\r\n\r\nexport default styles;","D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\AppHeader.js",[],"D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\AppHeaderStyles.js",[],"D:\\Code\\FutureFunding\\future-funding-client\\src\\components\\AppDrawer.js",["125"],"import { Drawer, List, ListItem, makeStyles, Typography, Divider } from '@material-ui/core';\r\nimport React from 'react';\r\nimport {useHistory, Link} from 'react-router-dom';\r\n\r\nimport PersonOutlineOutlinedIcon from '@material-ui/icons/PersonOutlineOutlined';\r\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\r\nimport NotListedLocationOutlinedIcon from '@material-ui/icons/NotListedLocationOutlined';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\r\nimport HowToVoteOutlinedIcon from '@material-ui/icons/HowToVoteOutlined';\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\r\n\r\nimport styles from '../styles/AppDrawerStyles';\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nconst AppDrawer = (props) => {\r\n\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  const handleHomeJump = e => {\r\n    history.push(\"/\");\r\n    window.location.reload();\r\n  }\r\n\r\n  const handleProposalsJump = e => {\r\n    history.push(\"/proposals\");\r\n    window.location.reload();\r\n  }\r\n\r\n  const handleVotesJump = e => {\r\n    history.push(\"/votes\");\r\n    window.location.reload();\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Drawer \r\n      onClose={props.onClose}\r\n      open={props.open}\r\n      BackdropProps={{invisible: true}}\r\n      >\r\n        <List>\r\n          <ListItem>\r\n            <Typography variant=\"h6\" className={classes.appName}>\r\n              Future Funding\r\n            </Typography>\r\n          </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List className={classes.drawerList}>\r\n          <ListItem button onClick={handleHomeJump}>\r\n            <HomeOutlinedIcon color=\"action\" className={classes.listIcons} />\r\n            <Typography variant=\"subtitle2\" className={classes.listText}> Home </Typography>\r\n          </ListItem>\r\n          <ListItem button onClick={handleProposalsJump}>\r\n            <DescriptionOutlinedIcon color=\"action\" className={classes.listIcons} />\r\n            <Typography variant=\"subtitle2\" className={classes.listText}> My Proposals </Typography>\r\n          </ListItem>\r\n          <ListItem button onClick={handleVotesJump}>\r\n            <HowToVoteOutlinedIcon color=\"action\" className={classes.listIcons} />\r\n            <Typography variant=\"subtitle2\" className={classes.listText}> Votes </Typography>\r\n          </ListItem>\r\n        </List>\r\n        <Divider />\r\n        <List className={classes.drawerList}>\r\n          <ListItem button>\r\n            <PersonOutlineOutlinedIcon color=\"action\" className={classes.listIcons} />\r\n            <Typography variant=\"subtitle2\" className={classes.listText}> Account </Typography>\r\n          </ListItem>\r\n          <ListItem button>\r\n            <SettingsOutlinedIcon color=\"action\" className={classes.listIcons} />\r\n            <Typography variant=\"subtitle2\" className={classes.listText}> Settings </Typography>\r\n          </ListItem>\r\n          <ListItem button>\r\n            <NotListedLocationOutlinedIcon color=\"action\" className={classes.listIcons} />\r\n            <Typography variant=\"subtitle2\" className={classes.listText}> Help & Feedback </Typography>\r\n          </ListItem>\r\n          <ListItem button>\r\n            <InfoOutlinedIcon color=\"action\" className={classes.listIcons} />\r\n            <Typography variant=\"subtitle2\" className={classes.listText}> About </Typography>\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default AppDrawer;","D:\\Code\\FutureFunding\\future-funding-client\\src\\styles\\AppDrawerStyles.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":8,"column":9,"nodeType":"132","messageId":"133","endLine":8,"endColumn":22},{"ruleId":"130","severity":1,"message":"134","line":2,"column":33,"nodeType":"132","messageId":"133","endLine":2,"endColumn":40},{"ruleId":"130","severity":1,"message":"135","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":17},{"ruleId":"130","severity":1,"message":"136","line":9,"column":8,"nodeType":"132","messageId":"133","endLine":9,"endColumn":17},{"ruleId":"130","severity":1,"message":"137","line":31,"column":10,"nodeType":"132","messageId":"133","endLine":31,"endColumn":20},{"ruleId":"130","severity":1,"message":"138","line":31,"column":22,"nodeType":"132","messageId":"133","endLine":31,"endColumn":35},{"ruleId":"130","severity":1,"message":"139","line":13,"column":10,"nodeType":"132","messageId":"133","endLine":13,"endColumn":17},{"ruleId":"140","severity":1,"message":"141","line":36,"column":6,"nodeType":"142","endLine":36,"endColumn":8,"suggestions":"143"},{"ruleId":"130","severity":1,"message":"144","line":1,"column":37,"nodeType":"132","messageId":"133","endLine":1,"endColumn":52},{"ruleId":"130","severity":1,"message":"134","line":5,"column":21,"nodeType":"132","messageId":"133","endLine":5,"endColumn":28},{"ruleId":"130","severity":1,"message":"135","line":8,"column":8,"nodeType":"132","messageId":"133","endLine":8,"endColumn":17},{"ruleId":"130","severity":1,"message":"136","line":9,"column":8,"nodeType":"132","messageId":"133","endLine":9,"endColumn":17},{"ruleId":"145","severity":1,"message":"146","line":21,"column":44,"nodeType":"147","messageId":"148","endLine":21,"endColumn":56},{"ruleId":"130","severity":1,"message":"149","line":29,"column":10,"nodeType":"132","messageId":"133","endLine":29,"endColumn":20},{"ruleId":"130","severity":1,"message":"150","line":32,"column":10,"nodeType":"132","messageId":"133","endLine":32,"endColumn":15},{"ruleId":"130","severity":1,"message":"151","line":32,"column":17,"nodeType":"132","messageId":"133","endLine":32,"endColumn":25},{"ruleId":"130","severity":1,"message":"152","line":132,"column":9,"nodeType":"132","messageId":"133","endLine":132,"endColumn":25},{"ruleId":"130","severity":1,"message":"153","line":12,"column":10,"nodeType":"132","messageId":"133","endLine":12,"endColumn":17},{"ruleId":"130","severity":1,"message":"154","line":19,"column":10,"nodeType":"132","messageId":"133","endLine":19,"endColumn":12},{"ruleId":"130","severity":1,"message":"155","line":19,"column":14,"nodeType":"132","messageId":"133","endLine":19,"endColumn":19},{"ruleId":"140","severity":1,"message":"156","line":50,"column":6,"nodeType":"142","endLine":50,"endColumn":8,"suggestions":"157"},{"ruleId":"126","replacedBy":"158"},{"ruleId":"128","replacedBy":"159"},{"ruleId":"130","severity":1,"message":"134","line":2,"column":15,"nodeType":"132","messageId":"133","endLine":2,"endColumn":22},{"ruleId":"130","severity":1,"message":"160","line":2,"column":24,"nodeType":"132","messageId":"133","endLine":2,"endColumn":34},{"ruleId":"130","severity":1,"message":"135","line":6,"column":8,"nodeType":"132","messageId":"133","endLine":6,"endColumn":17},{"ruleId":"130","severity":1,"message":"136","line":7,"column":8,"nodeType":"132","messageId":"133","endLine":7,"endColumn":17},{"ruleId":"130","severity":1,"message":"137","line":16,"column":10,"nodeType":"132","messageId":"133","endLine":16,"endColumn":20},{"ruleId":"130","severity":1,"message":"161","line":67,"column":9,"nodeType":"132","messageId":"133","endLine":67,"endColumn":25},{"ruleId":"130","severity":1,"message":"162","line":71,"column":9,"nodeType":"132","messageId":"133","endLine":71,"endColumn":26},{"ruleId":"130","severity":1,"message":"153","line":12,"column":10,"nodeType":"132","messageId":"133","endLine":12,"endColumn":17},{"ruleId":"130","severity":1,"message":"163","line":17,"column":10,"nodeType":"132","messageId":"133","endLine":17,"endColumn":20},{"ruleId":"130","severity":1,"message":"164","line":18,"column":10,"nodeType":"132","messageId":"133","endLine":18,"endColumn":20},{"ruleId":"130","severity":1,"message":"154","line":19,"column":10,"nodeType":"132","messageId":"133","endLine":19,"endColumn":12},{"ruleId":"130","severity":1,"message":"155","line":19,"column":14,"nodeType":"132","messageId":"133","endLine":19,"endColumn":19},{"ruleId":"130","severity":1,"message":"165","line":35,"column":13,"nodeType":"132","messageId":"133","endLine":35,"endColumn":18},{"ruleId":"140","severity":1,"message":"166","line":54,"column":6,"nodeType":"142","endLine":54,"endColumn":8,"suggestions":"167"},{"ruleId":"130","severity":1,"message":"168","line":2,"column":8,"nodeType":"132","messageId":"133","endLine":2,"endColumn":14},{"ruleId":"130","severity":1,"message":"169","line":3,"column":21,"nodeType":"132","messageId":"133","endLine":3,"endColumn":25},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Toolbar' is defined but never used.","'AppHeader' is defined but never used.","'AppDrawer' is defined but never used.","'drawerOpen' is assigned a value but never used.","'setDrawerOpen' is assigned a value but never used.","'project' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.address' and 'props.web3.eth.Contract'. Either include them or remove the dependency array.","ArrayExpression",["172"],"'useLayoutEffect' is defined but never used.","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","'dialogDays' is assigned a value but never used.","'count' is assigned a value but never used.","'setCount' is assigned a value but never used.","'handleDaysChange' is assigned a value but never used.","'address' is assigned a value but never used.","'to' is assigned a value but never used.","'setTo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.contract.methods', 'props.id', 'props.projectID', and 'props.web3.eth.Contract'. Either include them or remove the dependency array.",["173"],["170"],["171"],"'Typography' is defined but never used.","'handleDrawerOpen' is assigned a value but never used.","'handleDrawerClose' is assigned a value but never used.","'isApproved' is assigned a value but never used.","'isFinished' is assigned a value but never used.","'tmpTo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isVoted', 'props.account', 'props.contract.methods', 'props.proposalID', and 'props.web3.eth.Contract'. Either include them or remove the dependency array.",["174"],"'yellow' is defined but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [props.address, props.web3.eth.Contract]",{"range":"181","text":"182"},"Update the dependencies array to be: [props.contract.methods, props.id, props.projectID, props.web3.eth.Contract]",{"range":"183","text":"184"},"Update the dependencies array to be: [isVoted, props.account, props.contract.methods, props.proposalID, props.web3.eth.Contract]",{"range":"185","text":"186"},[1400,1402],"[props.address, props.web3.eth.Contract]",[2261,2263],"[props.contract.methods, props.id, props.projectID, props.web3.eth.Contract]",[2514,2516],"[isVoted, props.account, props.contract.methods, props.proposalID, props.web3.eth.Contract]"]